/*
 * CommaSeperatedArraySerializationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
 'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.CommaSeperatedController;
const ServerResponse = testerlib.ServerResponse;

describe("CommaSeperatedController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * {"age" : 15,"dependents" : [1,2,3,4] }
     */
    it("should testCommaSeperatedArraySerializationInQuery response", function testCommaSeperatedArraySerializationInQueryTest(done) {
        // parameters for the API call
        let dependent = [1, 2, 3, 4];

        controller.getCommaSeperatedInQuery(dependent, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {"passed": true}, true, true, false));
            done();
        });
    });

    /**
     * Todo Add description for test testCommaSeperatedArraySerializationInQuery1
     */
    it("should testCommaSeperatedArraySerializationInQuery1 response", function testCommaSeperatedArraySerializationInQuery1Test(done) {
        // parameters for the API call
        let dependent = ["ab", "bc", "cd", "ef"];

        controller.getCommaSeperatedInQuery1(dependent, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {"passed": true}, true, true, false));
            done();
        });
    });

    /**
     * Todo Add description for test testCommaSeperatedArraySerializationInQuery2
     */
    it("should testCommaSeperatedArraySerializationInQuery2 response", function testCommaSeperatedArraySerializationInQuery2Test(done) {
        // parameters for the API call
        let dependent = ["ab", "bc\tbc", "cd", "ef"];

        controller.getCommaSeperatedInQuery1(dependent, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {"passed": true}, true, true, false));
            done();
        });
    });

});
